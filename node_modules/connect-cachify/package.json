{
  "author": {
    "name": "Austin King",
    "email": "shout@ozten.com",
    "url": "http://ozten.com"
  },
  "name": "connect-cachify",
  "description": "Connect middleware to provide easy frontend caching.",
  "keywords": [
    "cache",
    "HTTP",
    "expires",
    "asset",
    "max-age",
    "caching"
  ],
  "version": "0.0.12",
  "homepage": "http://github.com/mozilla/connect-cachify",
  "repository": {
    "type": "git",
    "url": "https://github.com/mozilla/connect-cachify.git"
  },
  "bugs": {
    "url": "https://github.com/mozilla/connect-cachify/issues"
  },
  "main": "index",
  "engines": {
    "node": ">=0.4.7"
  },
  "dependencies": {
    "underscore": ">=1.3.1"
  },
  "devDependencies": {
    "ejs": "0.6.1",
    "express": "2.5.8",
    "nodeunit": ">=0.6.4",
    "shelljs": "0.0.8",
    "step": ">=0.0.5"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mozilla/connect-cachify.png)](http://travis-ci.org/mozilla/connect-cachify)\n# Cachify #\n``connect-cachify`` makes having proper browser cache and HTTP caching\nbehavior for assets easier.\n\nIt is a set of middleware and view helper functions for the Node.js express framework.\n\nThis does not provide in-memory caching, middleware caching, or many other\ntypes of caching. Cashify is focused on reducing the number of HTTP requests\nto your web nodes.\n\n## Installation ##\n\n    npm install connect-cachify\n\n## How to Use ##\nInstructions below are for Express 2, but Express 3 is also supported.\n\n    var app,\n        express = require('express'),\n        cachify = require('connect-cachify'),\n\n    app = express.createServer();\n\n## Middleware ##\n    var assets = {\n        \"/js/main.min.js\": [\n          '/js/lib/jquery.js',\n          '/js/magick.js',\n          '/js/laughter.js'\n        ],\n        \"/css/home.min.css\": [\n          '/css/reset.css',\n          '/css/home.css'\n        ],\n        \"/css/dashboard.min.css\": [\n          '/css/reset.css',\n          '/css/common.css'\n          '/css/dashboard.css'\n        ]\n    };\n    app.use(cachify.setup(assets, {\n      root: __dirname,\n      production: your_config['use_minified_assets'],\n    }));\n\n``setup`` takes two parameters: assets and options. Assets is an associative\narray where the keys are your production urls, and the value is a list of\ndevelopment urls that produce the same asset.\n\nWe'll discussion options in a section below.\n\nCachify middleware is now enabled. Let's look at this after hooking up the view\nhelpers.\n\nNote: You **must** put ``cachify.setup`` before static or other connect\nmiddleware which works with these same requests.\n\n## In an EJS template\n\n    ...\n    <head>\n      <title>Dashboard: Hamsters of North America</title>\n      <%- cachify_css('/css/dashboard.min.css') %>\n    </head>\n    <body>\n    ...\n      <%- cachify_js('/js/main.min.js') %>\n    </body>\n    ...\n\nIn production mode, a call to ``cachify_js`` will produce a single script tag\nlike:\n\n    <script src=\"/js/fa6d51a13a245a90aeb48eeca0e52396/main.min.js\"></script>\n\nWhen production was set to false, ``cachify_js`` will produce:\n\n    <script src=\"/js/lib/jquery.js\"></script>\n    <script src=\"/js/magick.js\"></script>\n    <script src=\"/js/laughter.js\"></script>\n\nThe middleware makes caching transparent. A request for\n``/fa6d51a13a245a90aeb48eeca0e52396/js/main.min.js`` will have the req.url\nrewritten to ``/js/main.min.js``, so that other middleware will work properly.\n\nThe middleware sets the cache expiration headers to the Mayan Apocalypse, and\ndoes it's best to ensure browsers won't request that version of\n``/js/main.min.js`` again.\n\nA goal is for this module to work well with other connect compilers, such as\n[LESS](http://lesscss.org/) or\n[connect-assets](https://github.com/TrevorBurnham/connect-assets).\n\n## Options ##\nThe following are optional config for ``cachify.setup``\n\n* root - Path where static assets are stored on disk. Same value as you'd pass\nto the ``static`` middleware.\n\n* production - Boolean indicating if your in development or production mode.\n    Effects how links for js and css files are generated.\n\n* debug - Boolean indicating we should always re-write urls with a hash.\n\nFor full details, see the [API documentation](docs/API.md).\n\n## Magick ##\nSo how does cachify work?\n\nWhen you cachify a url, it adds an MD5 hash of the file's contents into the URL\nit generates:\n\n    http://example.com/cbcb1e865e61c08a68a4e0bfa293e806/stylo.css\n\nIncoming requests are checked for this MD5 hash. If present and if we' know\nabout the resource (either via options or the file exists on disk), then the\nrequest path is rewritten back to ``/stylo.css``, so that another route can\nprocess the request.\n\nThese requests are served up with expires headers that are very long lived, so a user's browser will only request them once.\n\nCachify **doesn't** attempt to **find an older version** of your resource,\nif the MD5 has was for an older file.\n\n## Status ##\n\nThis module is brand spanking new. Please file\n[issues](https://github.com/mozilla/connect-cachify/issues) with ideas, bugs,\netc.\n\nIt was created as part of the [BrowserID](https://github.com/mozilla/browserid)\nproject.\n\n## Debugging ##\nTo debug cachify's hashed url behavior, pass in the following parameter in\nyour options block:\n\n    setup({ debug: true, ...});\n\nNow even in development mode, cache busting URLs will be generated, so you\ncan troubleshoot any problems cachify magick is causing you.\n\n## Development ##\n\nPatches are welcome! To run unit tests...\n\n    nodeunit test\n\n## Wordpress Cachify ##\nDoes this all sound like gobbledygook? Maybe your looking for [Wordpress cachify plugin](http://wordpress.org/extend/plugins/cachify/) instead of ``connect-cachify``.\n",
  "readmeFilename": "README.md",
  "_id": "connect-cachify@0.0.12",
  "dist": {
    "shasum": "4993e4913c9955a53d2a88ac627e2de7174674d3"
  },
  "_from": "connect-cachify"
}
