{
  "name": "client-sessions",
  "version": "0.0.9",
  "private": false,
  "description": "secure sessions stored in cookies",
  "main": "lib/client-sessions",
  "repository": {
    "type": "git",
    "url": "https://github.com/benadida/node-client-sessions"
  },
  "dependencies": {
    "cookies": "https://github.com/benadida/cookies/tarball/d2f0f0b3",
    "node-proxy": "0.6.0"
  },
  "devDependencies": {
    "vows": "0.5.13",
    "express": "2.5.0",
    "tobi": "https://github.com/Cowboy-coder/tobi/tarball/fd733a3",
    "zombie": "1.3.1"
  },
  "author": {
    "name": "Ben Adida",
    "email": "ben@adida.net"
  },
  "scripts": {
    "test": "vows --spec"
  },
  "engines": {
    "node": ">= 0.6.5"
  },
  "readme": "Secure sessions stored in cookies, for node.js\nMiddleware for Connect / Express apps.\n\nSession content is secure and tamper-free.\n\nThis does *not* use connect's built-int session middleware, because,\nif it did, things would get nasty in implementation given the conflict\nbetween the session ID and the session content itself. Also, this library\nuses its own cookie parser so that setup is easier and less error-prone.\n\nI don't recommend using both this middleware and connect's built-in\nsession middleware.\n\n\nAPI\n===\n\n    var clientSessions = require(\"client-sessions\");\n    app.use(clientSessions({\n        cookieName: 'session_state',    // defaults to session_state\n        secret: 'blargadeeblargblarg', // MUST be set\n        // true session duration:\n        // will expire after duration (ms)\n        // from last session.reset() or\n        // initial cookieing.\n        duration: 24 * 60 * 60 * 1000, // defaults to 1 day\n      }));\n\n    // later, in a request\n    req.session.foo = 'bar';\n    req.session.baz = 'baz2';\n    // results in a Set-Cookie header\n\n    console.log(req.session.baz)\n    // no updates to session results in no Set-Cookie header\n\n    // and then\n    if (req.session.foo == 'bar') {\n      // do something\n    }\n\n    // reset the session, preserving some variables\n    // if they exist. This means the session's creation time\n    // will be reset to now, with expiration in duration (ms).\n    req.session.reset(['csrf']);\n\nOptionally, if you'd like more explicit control over the cookie parameters you can do:\n\n\n    app.use(clientSessions({\n        cookieName: 'session_state',    // defaults to session_state\n        secret: 'blargadeeblargblarg', // MUST be set\n        // true session duration:\n        // will expire after duration (ms)\n        // from last session.reset() or\n        // initial cookieing.\n        duration: 24 * 60 * 60 * 1000, // defaults to 1 day\n        cookie: {\n          path: '/api',\n          // cookie expiration parameters\n          // this gets updated on every cookie call,\n          // so it's not appropriate for saying that the session\n          // expires after 2 weeks, for example, since the cookie\n          // may get updated regularly and push the time back.\n          maxAge: 14 * 24 * 60 * 60 * 1000 // in ms\n          httpOnly: true, // defaults to true\n          secure: false   // defaults to false\n        }\n      }));\n",
  "readmeFilename": "README.md",
  "_id": "client-sessions@0.0.9",
  "dist": {
    "shasum": "d9897c18f9edb8c42fe4e2d4cfe111b283409ec2"
  },
  "_from": "client-sessions"
}
