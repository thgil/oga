var pg = require('pg')
  , client
  , query;

var db = function(conString){
  client = new pg.Client(conString);
}

var p = db.prototype;

//config = {find:password,in:users[,where: username,arg: something]}
p.find = function(config, result, callback){
  if(typeof config.find === 'string' && typeof config.in === 'string')
    if(config.where === 'string') query = client.query("select "+config.find+" from "+config.in+" where "+config.where,[config.arg]);
    else query = client.query("select "+config.find+" from "+config.in);
    query.on('error', function(err) {
      if(callback) callback(err);
      client.on('drain', client.end.bind(client));
    });
    query.on('end', function(result) {
      this.result = result;
      client.on('drain', client.end.bind(client));
    });
}

//config = {table:users, username: name, password: word, email: mail}
//config = {table:files, filename: name, username: name}
p.add = function(config, callback){
  client.connect();
  if(config.table == 'users') {
    query = client.query("insert into "+config.table+"(username, password, email) values ($1,$2,$3)"
                          , [config.username ,config.password, config.email]);
  }
  else if(config.table == 'files') {
    console.log("finding: "+config.username);
    console.log("find({find:'uid',in:'users',where:'username=$1',arg:config.username})");

    query = client.query("insert into "+config.table+"(filename, uid) values ($1,$2)"
                          , [config.filename , uid]);
  }
  else return;
  query.on('error', function(err) {
    if(callback) callback(err);
    client.on('drain', client.end.bind(client));
  });
  query.on('end', function() {
    client.on('drain', client.end.bind(client));
  });
}

//config = {table:users, where: word, arg: mail}
p.remove = function(config, callback){
  client.connect();
  if(typeof config.table === 'string') {
    query = client.query("delete from "+config.table+" where "+config.where+"=$1"
                          , [config.arg]);
  }

  query.on('error', function(err) {
    if(callback) callback(err);
    client.on('drain', client.end.bind(client));
  });
  query.on('end', function() {
    client.on('drain', client.end.bind(client));
  });
}

module.exports = db;
